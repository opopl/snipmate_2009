snippet php
	<?php
	${1}
	?>
snippet phpl
	<?php ${1} ?>
snippet mysqli_connect
	$con=mysqli_connect("localhost", "root", "", "cv_cms");
snippet ec
	echo "${1:string}"${2};
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet ifget
	if (isset($_GET["${1}"])) {
		${2};
	}
snippet .
	=>
snippet pdo
	$db   = "information_schema";
	$user = "root";
	$pwd  = "";
	$conn = new PDO("mysql:dbname=$db",$user,$pwd);
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet vd
	var_dump(${1})
snippet doct5
	<!DOCTYPE HTML>
snippet htmlbase
	<base href="${1}" target="${2}"`Close()`>
snippet br
	echo "${1}"."<br/>\n";
snippet it domnodelist
	for ($i = $elements->length; --$i >= 0; ) {
		$el = $elements->item($i);
		$nodes = $el->childNodes;
	}
snippet sip
	set_include_path(get_include_path() .  PATH_SEPARATOR . $path);
snippet pg_connect
	resource pg_connect ( string $connection_string [, int $connect_type ] )
snippet form
	<form method="GET" action="<?php echo htmlentities($_SERVER['PHP_SELF']); ?>"  >
	<p>
		<label for="do"></label>
		<input type="submit" name="do" value="do"/>
	</p>
	</form>
snippet putsbr
	puts_br([${1}]);
snippet list
	[
		${1} => ${2},
	]
snippet push
	array_push(${1},${2});
snippet map
	$cb = function($x){ return $x; };
	$a  = array_map($cb,$a);
snippet req
	require '${1:file}';${2}
snippet ar
	array(<++>);
snippet select
	<select id="<++>" name=""> 
	<?php
		foreach (<++> as $X) {
			echo '<option value="'.$X.'">'.$X.'</option>';
		}
	?>
	</select>
snippet req1
	require_once '${1:file}';${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ Get['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 **/
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	**/${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 **/${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 **/
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 **/
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 **/${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 **/
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 **/${4}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3})
	{${7}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 **/
	
	/**
	 * Define DocBlock
	 *//
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 **/
	interface ${1:}
	{${5}
	} // END interface $1
# class ...
snippet class
	/**
	 * ${1}
	 **/
	class ${2:ClassName}
	{
		${3}
		function ${4:__construct}(${5:argument})
		{
			${6:// code...}
		}
	}
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	}
snippet ife
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet fore
	foreach ($${1:variable} as $${2:key}) {
		${3:// code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:key}) {
		${3:// code...}
	}
snippet try
	try {
		${1}
	} catch (Exception $e) {
		echo ${2},$e->getMessage(),"\n";
	}
snippet fun
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
snippet f
	function ${1:FunctionName}(${2})
	{
		${3:// code...}
	}
# $... = array (...)
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}
snippet loadxml
	 $file = __DIR__  . DIRECTORY_SEPARATOR . 'top.xml';
	 global $LINKS;
	 $LINKS=array();
	 if (file_exists($file)) {
			$domSrc = file_get_contents($file);
			$dom    = new DomDocument();
			$dom->loadXML($domSrc);

			$xp    = new DOMXpath($dom);
			$xpath = "//top/links/a";
			$elements = $xp->query($xpath);
			if (! is_null ( $elements )) {
				 for ($i = $elements->length; --$i >= 0; ) {
						 $node  = $elements->item($i);
						 $val   = $node->nodeValue;
						 $url   = $node->getAttribute('href');
						 $title = $node->textContent;
						 array_unshift($LINKS,[ "title" => $title, "url" => $url, ]);
				}
   			}
	}else{
		 echo "No config xml file: " . $file;
	}
